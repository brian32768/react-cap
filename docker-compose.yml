# 4 1/2 parts
#   mysql
#   adminer, exposed via port 443 proxy as dbadmin.map46.com
#   node running microservice
#   mysql-backup, not implemented, backs up the databases
#   a client
# extras: 
#   a private network, so that mysql is not exposed
#   a volume to persist sql database
version: '3.6'
services:
    webapp:
        container_name: cap-webapp
        image: cap_webapp
        build:
            context: client
            dockerfile: Dockerfile.webapp
        env_file: .env
        environment:
            VIRTUAL_HOST: ${WEBAPP_VIRTUAL_HOST}
            VIRTUAL_PORT: ${WEBAPP_VIRTUAL_PORT}
            NETWORK_ACCESS: internal
            LETSENCRYPT_HOST: ${WEBAPP_VIRTUAL_HOST}
            LETSENCRYPT_MAIL: ${MY_EMAIL}
        expose: 
            - 5000
        ports:
            - ${WEBAPP_VIRTUAL_PORT}:5000
#            - 9229:9229
        networks:
            - proxy_net
        restart: unless-stopped
        depends_on: 
            - "api-server"

    api-server:
        container_name: cap-api-server
        image: cap_api_server
        build:
            context: server
            dockerfile: Dockerfile.api_server
        env_file: .env
        environment:
            DBHOST: ${DBHOST}
            # This database will be created if it does not exist.
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            # The database will be owned by this user/pass
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}

        # We're hiding behind the webapp URL, see README
#            VIRTUAL_HOST: ${API_SERVER_VIRTUAL_HOST}
#            VIRTUAL_PORT: ${API_SERVER_VIRTUAL_PORT}
#            NETWORK_ACCESS: internal
#            LETSENCRYPT_HOST: ${API_SERVER_VIRTUAL_HOST}
#            LETSENCRYPT_MAIL: ${MY_EMAIL}
        expose: 
            - 3000
        ports:
            - 3000:3000
            - 9229:9229
        networks:
            - proxy_net
        restart: unless-stopped
        depends_on: 
            - "db"
        # Run with the debugger port open, for what it's worth.
        command: node --inspect=0.0.0.0:9229 server.js

    db:
        container_name: cap-mysql
        image: mysql
        env_file: .env
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            # This database will be created if it does not exist.
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            # The database will be owned by this user/pass
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        expose:
            - 3306
        networks:
            - proxy_net
        volumes:
            - cap_data:/var/lib/mysql
        restart: unless-stopped

    adminer:
        container_name: cap-adminer
        image: adminer
        env_file: .env
        expose:
            - 8080
        # Only open this port for testing;
        # normal operation is nginx proxied
        ports:
            - ${ADMINER_VIRTUAL_PORT}:8080
        environment:
            VIRTUAL_HOST: ${ADMINER_VIRTUAL_HOST}
            VIRTUAL_PORT: ${ADMINER_VIRTUAL_PORT}
            NETWORK_ACCESS: internal
            LETSENCRYPT_HOST: ${ADMINER_VIRTUAL_HOST}
            LETSENCRYPT_MAIL: ${MY_EMAIL}
        networks:
            - proxy_net
        restart: unless-stopped
        depends_on: 
            - "db"

volumes:
    cap_data:
        name: cap_data
networks:
    proxy_net:
        name: proxy_net
        external: true
