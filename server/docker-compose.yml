# 3 1/2 parts
#   mysql
#   adminer, exposed via port 443 proxy as dbadmin.map46.com
#   node running microservice
#   mysql-backup, not implemented, backs up the databases
#
# extras: 
#   a private network, so that mysql is not exposed
#   a volume to persist sql database
version: '3.6'
services:
    db:
        container_name: cap-mysql
        hostname: db
        domainname: map46.com
        image: mysql
        env_file: .env
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            # This database will be created if it does not exist.
            MYSQL_DATABASE: ${DBNAME}
            # The database will be owned by this user/pass
            MYSQL_USER: ${DBUSER}
            MYSQL_PASSWORD: ${DBPASSWORD}
        networks:
            - cap_net
#        volumes:
#            - cap_data:/var/lib/mysql
        restart: unless-stopped

    adminer:
        container_name: cap-adminer
        hostname: adminer
        domainname: map46.com
        env_file: .env
        image: adminer
        expose:
            - "8080"
        # Only open this port for testing;
        # normal operation is nginx proxied
        ports:
            - "8080:8080"
        environment:
            VIRTUAL_HOST: ${DBADMIN_VIRTUAL_HOST}
            VIRTUAL_PORT: 80
            NETWORK_ACCESS: internal
            LETSENCRYPT_HOST: ${DBADMIN_VIRTUAL_HOST}
            LETSENCRYPT_MAIL: ${MY_EMAIL}
        networks:
            - proxy_net
            - cap_net
        restart: unless-stopped
        depends_on: 
            - "db"

    nodeserver:
        container_name: cap-server
        env_file: .env
        image: brian32768/cap_server
        expose: 
            - "3000"
        ports:
            - "3000:3000"
        networks:
            - proxy_net
            - cap_net
        build:
            context: .
            dockerfile: Dockerfile.nodeserver
        restart: unless-stopped
        depends_on: 
            - "db"

volumes:
    cap_data:
        name: cap_data
networks:
    proxy_net:
        name: proxy_net
        external: true
    cap_net:
        name: cap_net
